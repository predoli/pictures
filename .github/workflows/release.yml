name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-deb:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-unknown-linux-gnu
        
    - name: Install packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev rubygems build-essential
        sudo gem install fpm
        
    - name: Install cross-compilation dependencies
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu
        sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev libsoup2.4-dev
        
    - name: Build Go backend for ARM64
      run: |
        cd backend
        go mod tidy
        
        # Pi 64-bit (ARM64) only
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o ../digital-photo-frame-arm64 .
        
    - name: Build Tauri frontend for ARM64
      run: |
        cd frontend
        npm ci
        
        # Set environment variables for cross-compilation
        export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
        export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
        export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        
        # Build for ARM64
        npm run tauri build -- --target aarch64-unknown-linux-gnu
        
        
    - name: Prepare package structure
      run: |
        mkdir -p package-root/opt/photoframe
        mkdir -p package-root/etc/photoframe
        mkdir -p package-root/usr/bin
        
        # Copy Tauri frontend binary
        cp frontend/src-tauri/target/aarch64-unknown-linux-gnu/release/photo-frame-frontend package-root/opt/photoframe/
        
        # Copy config template
        cp backend/config.yaml.example package-root/etc/photoframe/config.yaml
        
        # Copy wrapper script
        cp packaging/wrapper/digital-photo-frame package-root/usr/bin/
        chmod +x package-root/usr/bin/digital-photo-frame
        
        
    - name: Build Pi 64-bit package (ARM64)
      run: |
        # Copy ARM64 binary
        cp digital-photo-frame-arm64 package-root/opt/photoframe/digital-photo-frame-aarch64
        
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $VERSION"
        fpm -s dir -t deb -n photoframe-pi64 -v "$VERSION" \
          --architecture arm64 \
          --depends "libc6" \
          --description "Digital Photo Frame for Raspberry Pi 64-bit" \
          --url "https://github.com/${{ github.repository }}" \
          --maintainer "${{ github.actor }}" \
          --license "MIT" \
          -C package-root \
          opt etc usr
        
    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: debian-packages
        path: "*.deb"
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: "*.deb"
        body: |
          ## Digital Photo Frame - ARM64 Only
          
          Simplified release for Raspberry Pi 64-bit OS.
          
          ### Installation
          ```bash
          # Download and install
          wget photoframe-pi64_*.deb
          sudo apt install ./photoframe-pi64_*.deb
          ```
          
          ### Configuration
          ```bash
          # Edit config
          sudo nano /etc/photoframe/config.yaml
          ```
          
          ### Manual Usage
          ```bash
          # Run backend
          cd /etc/photoframe && digital-photo-frame
          
          # Run frontend (fullscreen)
          /opt/photoframe/photo-frame-frontend --fullscreen
          ```
          
          ### Access
          Web interface: `http://your-pi-ip:8080`
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}