name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-go-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'
          
      - name: Build Go backend for ARM64
        run: |
          cd backend
          go mod tidy
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o ../digital-photo-frame-arm64 .
          
      - name: Upload Go binary
        uses: actions/upload-artifact@v4
        with:
          name: go-backend-arm64
          path: digital-photo-frame-arm64

  build-arm64-tauri:
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: build tauri app
        run: |
          cd frontend
          npm run tauri build
            
      - name: Upload Tauri binary
        uses: actions/upload-artifact@v4
        with:
          name: tauri-frontend-arm64
          path: frontend/src-tauri/target/release/photo-frame

  create-debian-package:
    runs-on: ubuntu-latest
    needs: [build-go-backend, build-arm64-tauri]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          
      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev rubygems build-essential
          sudo gem install fpm
          
      - name: Create Debian package
        run: |
          # Create package structure
          mkdir -p package-root/opt/photoframe
          mkdir -p package-root/etc/photoframe
          mkdir -p package-root/usr/bin
          
          # Copy Go backend binary
          cp digital-photo-frame-arm64 package-root/opt/photoframe/digital-photo-frame-aarch64
          
          # Copy Tauri frontend binary
          cp photo-frame package-root/opt/photoframe/photo-frame-frontend
          chmod +x package-root/opt/photoframe/photo-frame-frontend
          
          # Copy config and wrapper
          cp backend/config.yaml.example package-root/etc/photoframe/config.yaml
          cp packaging/wrapper/digital-photo-frame package-root/usr/bin/
          chmod +x package-root/usr/bin/digital-photo-frame
          
          # Build Debian package
          VERSION=${GITHUB_REF#refs/tags/v}
          if [ -z "$VERSION" ] || [ "$VERSION" = "$GITHUB_REF" ]; then
            VERSION="0.0.0-$(date +%Y%m%d%H%M%S)"
          fi
          
          fpm -s dir -t deb -n photoframe-pi64 -v "$VERSION" \
            --architecture arm64 \
            --depends "libc6" \
            --description "Digital Photo Frame for Raspberry Pi 64-bit" \
            --url "https://github.com/${{ github.repository }}" \
            --maintainer "${{ github.actor }}" \
            --license "MIT" \
            --after-install packaging/debian/postinst \
            -C package-root \
            opt etc usr
            
      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: debian-package
          path: "*.deb"
          
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: "*.deb"
          body: |
            ## Digital Photo Frame - ARM64
            
            ### Installation
            ```bash
            wget photoframe-pi64_*.deb
            sudo apt install ./photoframe-pi64_*.deb
            ```
            
            ### Usage
            ```bash
            # Run backend
            cd /etc/photoframe && digital-photo-frame
            
            # Run frontend
            /opt/photoframe/photo-frame-frontend --fullscreen
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}