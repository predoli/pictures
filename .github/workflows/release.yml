name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-go-backend:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          
      - name: Build Go backend for ARM64
        run: |
          cd backend
          go mod tidy
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o ../digital-photo-frame-arm64 .
          
      - name: Upload Go binary
        uses: actions/upload-artifact@v4
        with:
          name: go-backend-arm64
          path: digital-photo-frame-arm64

  build-tauri-app:
    runs-on: ubuntu-22.04
    needs: build-go-backend
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Go backend
        uses: actions/download-artifact@v4
        with:
          name: go-backend-arm64
          
      - name: Install dependencies (Ubuntu only)
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      - name: Install cross-compilation tools
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu
          
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './frontend/src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Clean Cargo cache
        run: |
          cd frontend/src-tauri
          cargo clean
          rm -f Cargo.lock

      - name: Build the app for ARM64
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        with:
          projectPath: frontend
          args: --target aarch64-unknown-linux-gnu
          
  create-debian-package:
    runs-on: ubuntu-22.04
    needs: [build-go-backend, build-tauri-app]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*'
          merge-multiple: true
          
      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev rubygems build-essential
          sudo gem install fpm
          
      - name: Create Debian package
        run: |
          # Create package structure
          mkdir -p package-root/opt/photoframe
          mkdir -p package-root/etc/photoframe
          mkdir -p package-root/usr/bin
          
          # Copy binaries
          cp digital-photo-frame-arm64 package-root/opt/photoframe/digital-photo-frame-aarch64
          # Tauri binary will be in artifacts
          find . -name "photo-frame-frontend" -type f -exec cp {} package-root/opt/photoframe/ \;
          
          # Copy config and scripts
          cp backend/config.yaml.example package-root/etc/photoframe/config.yaml
          cp packaging/wrapper/digital-photo-frame package-root/usr/bin/
          chmod +x package-root/usr/bin/digital-photo-frame
          
          # Build package
          VERSION=${GITHUB_REF#refs/tags/v}
          if [ -z "$VERSION" ] || [ "$VERSION" = "$GITHUB_REF" ]; then
            VERSION="0.0.0-$(date +%Y%m%d%H%M%S)"
          fi
          
          fpm -s dir -t deb -n photoframe-pi64 -v "$VERSION" \
            --architecture arm64 \
            --depends "libc6" \
            --description "Digital Photo Frame for Raspberry Pi 64-bit" \
            --url "https://github.com/${{ github.repository }}" \
            --maintainer "${{ github.actor }}" \
            --license "MIT" \
            --after-install packaging/debian/postinst \
            -C package-root \
            opt etc usr
            
      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: debian-package
          path: "*.deb"
          
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: "*.deb"
          body: |
            ## Digital Photo Frame - ARM64
            
            ### Installation
            ```bash
            wget photoframe-pi64_*.deb
            sudo apt install ./photoframe-pi64_*.deb
            ```
            
            ### Usage
            ```bash
            # Run backend
            cd /etc/photoframe && digital-photo-frame
            
            # Run frontend
            /opt/photoframe/photo-frame-frontend --fullscreen
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}